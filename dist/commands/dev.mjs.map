{
  "version": 3,
  "sources": ["../../src/commands/dev.mts"],
  "sourcesContent": ["/*\n * Copyright (c) 2022 Kiyozz.\n *\n * All rights reserved.\n */\n\nimport { ChildProcess, spawn } from 'child_process'\nimport path from 'node:path'\n\nimport { Builder } from '../builder.mjs'\nimport { Cli, CliResult } from '../cli.mjs'\nimport { CONFIG_FILE_NAME } from '../config/constants.mjs'\nimport { Logger } from '../console.mjs'\nimport { Worker } from '../worker.mjs'\n\nconst _isWindows = process.platform === 'win32'\nconst _electronBin = _isWindows ? 'electron.cmd' : 'electron'\nconst _logger = new Logger('Commands/Dev')\n\nclass _ApplicationStarter {\n  private _electronProcess: ChildProcess | undefined\n  private readonly _args: readonly string[]\n\n  constructor(unknownInputs: string[]) {\n    this._cleanupProcess()\n    this._args = ['dist/main/main.js', ...unknownInputs]\n  }\n\n  async start(): Promise<void> {\n    if (this._electronProcess) {\n      try {\n        this._kill()\n      } catch (e) {\n        _logger.end('Error occurred while killing latest main', e)\n      }\n\n      this._electronProcess = undefined\n    }\n\n    _logger.log('Start application')\n\n    this._electronProcess = spawn(\n      path.resolve(`node_modules/.bin/${_electronBin}`),\n      this._args,\n      {\n        stdio: 'inherit',\n      },\n    )\n\n    this._cleanupElectronProcess()\n  }\n\n  private _kill(): void {\n    if (this._electronProcess) {\n      this._electronProcess.removeAllListeners('close')\n\n      if (_isWindows) {\n        _logger.debug('kill electron process on windows')\n\n        spawn('taskkill', ['/pid', `${this._electronProcess.pid}`, '/f', '/t'])\n      } else {\n        _logger.debug('kill electron process on macOS/linux')\n        const pid = this._electronProcess.pid\n        const killed = this._electronProcess.killed\n        this._electronProcess = undefined\n\n        if (pid !== undefined && !killed) {\n          process.kill(pid)\n        }\n      }\n    }\n  }\n\n  private _cleanupElectronProcess() {\n    this._electronProcess?.on('close', (code, signal) => {\n      if (code === null) {\n        _logger.error('Main Process exited with signal', signal)\n        process.exit(1)\n      }\n\n      process.exit(code)\n    })\n  }\n\n  private _cleanupProcess() {\n    // eslint-disable-next-line no-undef\n    const clean = (signal: NodeJS.Signals) => {\n      process.on(signal, () => {\n        _logger.log('Cleanup before exit...')\n        _logger.debug('Signal', signal)\n\n        if (!this._electronProcess?.killed ?? false) {\n          this._kill()\n        }\n\n        process.exit(0)\n      })\n    }\n\n    clean('SIGINT')\n    clean('SIGTERM')\n  }\n}\n\nexport class Dev extends Cli {\n  private readonly _mainBuilder: Builder\n  private readonly _rendererBuilder: Builder | null\n  private readonly _applicationStarter: _ApplicationStarter\n\n  static async create(cli: CliResult, unknownInputs: string[]): Promise<Dev> {\n    process.env.NODE_ENV = 'development'\n\n    _logger.debug('Creating worker')\n\n    const worker = Worker.fromFile({\n      file: CONFIG_FILE_NAME,\n      env: 'development',\n    })\n\n    _logger.debug('Created worker')\n\n    const config = await worker.toConfigAsync()\n\n    _logger.debug('Parsed config')\n\n    const [mainBuilder, rendererBuilder] = await config.toBuildersAsync()\n\n    _logger.debug('Created builders')\n\n    return new Dev(cli, {\n      mainBuilder,\n      rendererBuilder,\n      unknownInputs,\n    })\n  }\n\n  constructor(\n    cli: CliResult,\n    {\n      mainBuilder,\n      rendererBuilder,\n      unknownInputs,\n    }: {\n      mainBuilder: Builder\n      rendererBuilder: Builder | null\n      unknownInputs: string[]\n    },\n  ) {\n    super(cli)\n\n    this._applicationStarter = new _ApplicationStarter(unknownInputs)\n    this._mainBuilder = mainBuilder\n    this._rendererBuilder = rendererBuilder\n  }\n\n  async init(): Promise<void> {\n    _logger.debug('Start')\n\n    const start = () => this._applicationStarter.start()\n\n    _logger.debug('Starting dev builders')\n    await this._mainBuilder.dev(start)\n    this._rendererBuilder?.dev(start)\n    _logger.debug('Started dev builders')\n    _logger.debug('Starting initial builds')\n\n    await Promise.all([\n      this._mainBuilder.hasInitialBuild\n        ? this._mainBuilder.build()\n        : Promise.resolve(),\n      this._rendererBuilder?.hasInitialBuild\n        ? this._rendererBuilder.build()\n        : Promise.resolve(),\n    ])\n\n    _logger.debug('Initial builds finished')\n\n    await this._applicationStarter.start()\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
